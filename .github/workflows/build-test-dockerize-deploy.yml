name: Build and test with Gradle

on:
  [pull_request]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    steps:

    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make Gradle Executable
      run: chmod +x ./gradlew

    - name: Run Tests
      run: ./gradlew test --tests *com*

    - name: Generate Bootable Jar
      run: ./gradlew bootJar

    - name: Run Coverage
      run: ./gradlew jacocoTestReport

    - name: Upload Report
      uses: 'actions/upload-artifact@v2'
      with:
        name: report.xml
        path: ${{ github.workspace }}/build/reports/jacoco/jacocoTestReport.xml

    - name: Jacoco Report to PR
      id: jacoco
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: |
          ${{ github.workspace }}/build/reports/jacoco/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        title: Coverage report, requires 80%
        min-coverage-overall: 80
        min-coverage-changed-files: 80
        debug-mode: false
        update-comment: true

    - name: Require 80% coverage
      if: ${{ steps.jacoco.outputs.coverage-overall < 80.0 }}
      uses: actions/github-script@v6
      with:
        script: |
          core.setFailed('Overall coverage is less than 80%!')

  run-integration-test:
    needs: check-code-coverage
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: '17'
          distribution: 'temurin'
          
    - name: Make Gradle Executable
      run: chmod +x ./gradlew

    - name: Start Application
      run: |
          ./gradlew bootRun &
          sleep 30

    - name: Run IntegrationTest tests
      run: ./gradlew test --tests *integration*

    - name: Stop Application
      run: |
        pkill -f "CalculatorApplication"
    
  build-and-push-image:
    needs: run-integration-test
    runs-on: ubuntu-latest
    permissions:
          contents: read
          packages: write
    steps: 

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle Executable
        run: chmod +x ./gradlew
     
      - name: Generate Bootable Jar
        run: |
          ./gradlew bootJar 
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tags: |
              type=ref,event=branch
              type=sha
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}

  deploy_simulation:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:

      - name: Echo Image Name
        run: |
            echo "Deploying image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
